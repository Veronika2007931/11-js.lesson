{"mappings":"AAmBE,MAAIA,MAAQ,CAEd,CAAEC,KAAM,QAASC,QAAQ,GAEzB,CAAED,KAAM,OAAQC,QAAQ,GAExB,CAAED,KAAM,OAAQC,QAAQ,GAExB,CAAED,KAAM,MAAOC,QAAQ,IAItB,SAASC,gBAAgBC,EAAUC,GACnC,OAAO,IAAIC,SAASC,IAKpBA,EAHsBH,EAASI,KAAIC,GACzBA,EAAKR,OAASI,EAAW,IAAKI,EAAMP,QAASO,EAAKP,QAAWO,IAElD,G,CAKtB,MAAMC,OAASC,GAAgBC,QAAQC,MAAMF,GAS3C,SAAOG,0BAA0BC,EAAKC,GACvC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,E,CAGrD,SAASK,gBAAgBC,GACxB,MAAMC,EAAQR,0BAA0B,IAAK,KAE9C,OAAO,IAAIR,SAAQ,CAACC,EAASgB,KAC3BC,YAAW,KACUP,KAAKE,SAAW,GAEnCZ,EAAQ,CAACkB,GAAGJ,EAAYI,GAAIC,KAAKJ,IAGjCC,EAAO,CAACE,GAAGJ,EAAYI,IAAI,GAExBH,EAAM,G,CAvBbnB,gBAAgBH,MAAO,SAAS2B,KAAKjB,QA4BrC,MAAMkB,WAAa,EAAEH,KAAIC,WAEvBd,QAAQiB,IAAI,cAACJ,kBAA0BC,OAAA,EAKjCI,SAAW,EAAEL,SAEnBb,QAAQmB,KAAK,8BAACN,wBAAqD,EAKrEL,gBAAgB,CAAEK,GAAI,GAAIC,KAAM,MAE/BC,KAAKC,YAELI,MAAMF","sources":["src/hw-11.js"],"sourcesContent":["\n// №1\n// function GetMiliseconds(ms){\n// return new Promise((resolve, reject) => {\n//    setInterval(()=>{\n//     resolve(`Проміс перейшов в стан resolve через ${ms} мілісекунд`)\n//    }, ms)\n\n   \n// })\n// }\n\n// GetMiliseconds(3000).then((succes)=>{\n//     console.log(succes)\n// })\n\n\n \n// №2\nconst users = [\n \n{ name: 'Mango', active: true },\n \n{ name: 'Poly', active: false },\n \n{ name: 'Ajax', active: true },\n \n{ name: 'Lux', active: false },\n \n];\n \n function toggleUserState(allUsers, userName){\n return new Promise((resolve)=>{\n\n  const updatedUsers = allUsers.map(user =>{\n    return user.name === userName ? { ...user, active: !user.active } : user\n});\n resolve(updatedUsers)\n\n})\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger)\n\n//  toggleUserState(users, 'Lux').then(logger);\n\n// №3\n\n\nfunction randomIntegerFromInterval(min, max){\n return Math.floor(Math.random() * (max - min + 1) + min);\n };\n\nfunction makeTransaction(transaction){\n const delay = randomIntegerFromInterval(200, 500);\n \nreturn new Promise((resolve, reject)=>{\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n    if (canProcess) {\n    resolve({id:transaction.id, time:delay});\n    \n    }else{\n    reject({id:transaction.id});\n    \n   }}, delay);\n});\n}\n\n\nconst logSuccess = ({id, time}) => {\n \n  console.log(`Транзакція ${id} оброблена за ${time} ms`);\n   \n  };\n   \n   \n  const logError = ({id})=> {\n   \n  console.warn(`Помилка обробки транзакції ${id}. Спробуйте пізніше.`);\n   \n  };\n   \n \nmakeTransaction({ id: 70, time: 150 })\n \n.then(logSuccess)\n \n.catch(logError);\n \n \n// makeTransaction({ id: 71, сума: 230 })\n \n// .then(logSuccess)\n \n// .catch(logError);\n \n \n// makeTransaction({ id: 72, сума: 75 })\n \n// .then(logSuccess)\n \n// .catch(logError);\n \n \n// makeTransaction({ id: 73, сума: 100 })\n \n// .then(logSuccess)\n \n// .catch(logError);\n\n\n"],"names":["users","name","active","toggleUserState","allUsers","userName","Promise","resolve","map","user","logger","updatedUsers","console","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","reject","setTimeout","id","time","then","logSuccess","log","logError","warn","catch"],"version":3,"file":"hw-11.60bdfdd2.js.map"}